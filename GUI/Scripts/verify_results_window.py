# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI/UIs/verify_results_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import csv
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QMessageBox
from GUI.Scripts.details_window import Ui_details_window
from GUI.Scripts.dialog import Ui_dialog
from GUI.Scripts.custom_input_window import Ui_custom_input_window
from Scripts.install_certificate import InstallCertificate
from Scripts.uninstall_certificate import UninstallCertificate
from Scripts.vote import Vote
from Scripts.remove_vote import RemoveVote
from Scripts.voted_list import VotedList


class Ui_verify_results_window(object):
    def setupUi(self, verify_results_window, verify_window, login_data, data):
        verify_results_window.setObjectName("verify_results_window")
        verify_results_window.resize(535, 461)
        verify_results_window.setFixedSize(535, 461)
        self.verifyres_table = QtWidgets.QTableWidget(verify_results_window)
        self.verifyres_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.verifyres_table.setGeometry(QtCore.QRect(10, 90, 511, 261))
        self.verifyres_table.setObjectName("veirfyres_table")
        self.verifyres_table.setColumnCount(3)
        self.verifyres_table.setHorizontalScrollMode(
            QtWidgets.QAbstractItemView.ScrollMode.ScrollPerPixel
        )
        self.verifyres_table.setVerticalScrollMode(
            QtWidgets.QAbstractItemView.ScrollMode.ScrollPerPixel
        )
        self.verifyres_table.setHorizontalHeaderItem(0, QtWidgets.QTableWidgetItem())
        self.verifyres_table.setHorizontalHeaderItem(1, QtWidgets.QTableWidgetItem())
        self.verifyres_table.setHorizontalHeaderItem(2, QtWidgets.QTableWidgetItem())
        data.sort(reverse=True, key=self.getVotes)
        for cert in data:
            self.insertTable(str(cert[5]), cert[0], cert[1])
        self.verifyres_title = QtWidgets.QLabel(verify_results_window)
        self.verifyres_title.setGeometry(QtCore.QRect(190, 10, 161, 61))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.verifyres_title.setFont(font)
        self.verifyres_title.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.verifyres_title.setObjectName("verifyres_title")
        self.verifyres_button_3 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_3.setGeometry(QtCore.QRect(20, 370, 100, 31))
        self.verifyres_button_3.setObjectName("verifyres_button_1")
        self.verifyres_button_3.hide()
        self.verifyres_button_3.clicked.connect(
            lambda: self.showDetails(verify_results_window, data)
        )
        font = QtGui.QFont()
        font.setPointSize(9)
        self.verifyres_button_2 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_2.setFont(font)
        self.verifyres_button_2.setGeometry(QtCore.QRect(290, 370, 100, 31))
        self.verifyres_button_2.setObjectName("verifyres_button_2")
        self.verifyres_button_2.hide()
        self.verifyres_button_2.clicked.connect(
            lambda: self.installCertificate(login_data, data)
        )
        font = QtGui.QFont()
        font.setPointSize(8)
        self.verifyres_button_1 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_1.setFont(font)
        self.verifyres_button_1.setGeometry(QtCore.QRect(150, 370, 100, 31))
        self.verifyres_button_1.setObjectName("verifyres_button_3")
        self.verifyres_button_1.hide()
        self.verifyres_button_1.clicked.connect(
            lambda: self.validadeCertificate(login_data, data)
        )
        font = QtGui.QFont()
        font.setPointSize(8)
        self.verifyres_button_4 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_4.setFont(font)
        self.verifyres_button_4.setGeometry(QtCore.QRect(420, 370, 100, 31))
        self.verifyres_button_4.setObjectName("verifyres_button_4")
        self.verifyres_button_4.hide()
        self.verifyres_button_4.clicked.connect(
            lambda: self.addToTrustedList(login_data, data)
        )
        self.verifyres_button_5 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_5.setGeometry(QtCore.QRect(20, 420, 100, 31))
        self.verifyres_button_5.setObjectName("verifyres_button_5")
        self.verifyres_button_5.clicked.connect(
            lambda: self.cancel(verify_results_window, verify_window)
        )
        font = QtGui.QFont()
        font.setPointSize(8)
        self.verifyres_table.itemClicked.connect(lambda: self.showDetailsButton())
        self.verifyres_button_6 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_6.setFont(font)
        self.verifyres_button_6.setGeometry(QtCore.QRect(150, 420, 100, 31))
        self.verifyres_button_6.setObjectName("verifyres_button_6")
        self.verifyres_button_6.hide()
        self.verifyres_button_6.clicked.connect(
            lambda: self.removeValidation(login_data, data)
        )
        font = QtGui.QFont()
        font.setPointSize(8)
        self.verifyres_table.itemClicked.connect(lambda: self.showDetailsButton())
        self.verifyres_button_7 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_7.setFont(font)
        self.verifyres_button_7.setGeometry(QtCore.QRect(290, 420, 100, 31))
        self.verifyres_button_7.setObjectName("verifyres_button_7")
        self.verifyres_button_7.hide()
        self.verifyres_button_7.clicked.connect(
            lambda: self.removeCertificate(login_data, data)
        )
        font = QtGui.QFont()
        font.setPointSize(6)
        self.verifyres_table.itemClicked.connect(lambda: self.showDetailsButton())
        self.verifyres_button_8 = QtWidgets.QPushButton(verify_results_window)
        self.verifyres_button_8.setFont(font)
        self.verifyres_button_8.setGeometry(QtCore.QRect(420, 420, 100, 31))
        self.verifyres_button_8.setObjectName("verifyres_button_8")
        self.verifyres_button_8.hide()
        self.verifyres_button_8.clicked.connect(
            lambda: self.removeFromTrustedList(login_data, data)
        )
        self.verifyres_table.itemClicked.connect(lambda: self.showDetailsButton())
        self.worker = Worker()
        self.worker.finished.connect(lambda: self.pop_up.close())
        self.worker.worker_complete.connect(
            lambda x: self.verifyValidation(x, login_data, data)
        )

        self.retranslateUi(verify_results_window)
        QtCore.QMetaObject.connectSlotsByName(verify_results_window)

    def retranslateUi(self, verify_results_window):
        _translate = QtCore.QCoreApplication.translate
        verify_results_window.setWindowTitle(
            _translate("verify_results_window", "Results")
        )
        self.verifyres_title.setText(_translate("verify_results_window", "Results"))
        self.verifyres_button_2.setText(
            _translate("verify_results_window", "Install Certificate")
        )
        self.verifyres_button_1.setText(
            _translate("verify_results_window", "Validate Certificate")
        )
        self.verifyres_button_3.setText(
            _translate("verify_results_window", "Show Details")
        )
        self.verifyres_button_4.setText(
            _translate("verify_results_window", "Add to Trusted List")
        )
        self.verifyres_button_5.setText(_translate("verify_results_window", "Cancel"))
        self.verifyres_button_6.setText(
            _translate("verify_results_window", "Remove Validation")
        )
        self.verifyres_button_7.setText(
            _translate("verify_results_window", "Uninstall Certificate")
        )
        self.verifyres_button_8.setText(
            _translate("verify_results_window", "Remove from Trsuted List")
        )
        self.verifyres_table.horizontalHeaderItem(0).setText(
            _translate("verify_results_window", "Votes")
        )
        self.verifyres_table.horizontalHeaderItem(1).setText(
            _translate("verify_results_window", "Address")
        )
        self.verifyres_table.horizontalHeaderItem(2).setText(
            _translate("verify_results_window", "URL")
        )

    def getVotes(self, e):
        return e[5]

    def insertTable(self, t0, t1, t2):
        rowPosition = self.verifyres_table.rowCount()
        self.verifyres_table.insertRow(rowPosition)
        self.verifyres_table.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(t0))
        self.verifyres_table.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(t1))
        self.verifyres_table.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(t2))
        self.verifyres_table.resizeColumnToContents(1)
        self.verifyres_table.resizeColumnToContents(2)

    def showDetailsButton(self):
        self.verifyres_button_1.show()
        self.verifyres_button_2.show()
        self.verifyres_button_3.show()
        self.verifyres_button_4.show()
        self.verifyres_button_6.show()
        self.verifyres_button_7.show()
        self.verifyres_button_8.show()

    def showDetails(self, verify_results_window, data):
        index = self.verifyres_table.currentRow()
        verify_results_window.hide()
        self.details_window = QtWidgets.QWidget()
        self.ui = Ui_details_window()
        self.ui.setupUi(self.details_window, verify_results_window, data[index])
        self.details_window.show()

    def installCertificate(self, login_data, data):
        index = self.verifyres_table.currentRow()
        input_passw = Ui_custom_input_window(
            "Sudo password", "Inform your Sudo password (will not be stored)", True
        )
        passw = input_passw.getResults()
        if passw:
            inst = InstallCertificate(
                passw, login_data.session.address, data[index][3], data[index][0]
            )
            install = inst.install_certificate()
            if install == True:
                self.showMsgBox(
                    "Success",
                    "Certificate installed!",
                    "Certificate has been successfully installed!",
                    False,
                    False,
                )
            else:
                self.showMsgBox(
                    "Error",
                    "Error installing the Certificate!",
                    str(install),
                    True,
                    False,
                )

    def removeCertificate(self, login_data, data):
        index = self.verifyres_table.currentRow()
        input_passw = Ui_custom_input_window(
            "Sudo password", "Inform your Sudo password (will not be stored)", True
        )
        passw = input_passw.getResults()
        if passw:
            rmv = UninstallCertificate(
                passw, login_data.session.address, data[index][0]
            )
            remove = rmv.remove_certificate()
            if remove == True:
                self.showMsgBox(
                    "Success",
                    "Certificate removed!",
                    "Certificate has been successfully removed!",
                    False,
                    False,
                )
            else:
                self.showMsgBox(
                    "Error",
                    "Error removing the Certificate!",
                    str(remove),
                    True,
                    False,
                )

    def verifyCertificateInTrustedList(self, address, cert_address):
        col_list = ["address"]
        df = pd.read_csv(
            "Data/UserData/" + address + "/TrustedList.csv",
            usecols=col_list,
        )
        for row in df["address"]:
            if cert_address == row:
                return True
        return False

    def addToTrustedList(self, login_data, data):
        returnValue = self.showMsgBox(
            "Information",
            "You are about to add this Certificate to your Trusted List",
            'Adding a Certificate to your Trsuted List means that you are trusting this entry. With this you can use the option "I\'m Feeling Lucky" to make sure that the results of your searches are only from your Trusted List, and if you want, you can also use the option "Update from Trusted List" to install ALL the Certificates validate by this same entry.\nWant to proceed?',
            False,
            True,
        )
        if returnValue == QMessageBox.Ok:
            index = self.verifyres_table.currentRow()
            if not self.verifyCertificateInTrustedList(
                login_data.session.address, data[index][0]
            ):
                try:
                    with open(
                        "Data/UserData/"
                        + login_data.session.address
                        + "/TrustedList.csv",
                        "a+",
                        newline="",
                    ) as database:
                        databasewriter = csv.writer(
                            database,
                            delimiter=",",
                            quotechar='"',
                            quoting=csv.QUOTE_MINIMAL,
                        )
                        databasewriter.writerow([data[index][0]])
                    self.showMsgBox(
                        "Success",
                        "Added to your Trusted List!",
                        'If you want to install ALL the new Certificates go back to the main page and select "Update from Trusted List"',
                        False,
                        False,
                    )
                except Exception as e:
                    self.showMsgBox(
                        "Error",
                        "An error has occurred!",
                        str(e),
                        True,
                        False,
                    )
            else:
                self.showMsgBox(
                    "Error",
                    "Certificate already in Trusted List!",
                    "You have already added this Certificate to your Trusted List",
                    True,
                    False,
                )

    def removeFromTrustedList(self, login_data, data):
        returnValue = self.showMsgBox(
            "Information",
            "You are about to remove this Certificate from your Trusted List",
            "Removing a Certificate from your Trsuted List means that EVERY Certificate that were validate by this one will be removed (including ones that you may have installed manually).\nWant to proceed?",
            False,
            True,
        )
        if returnValue == QMessageBox.Ok:
            index = self.verifyres_table.currentRow()
            if self.verifyCertificateInTrustedList(
                login_data.session.address, data[index][0]
            ):
                try:
                    self.worker.args("list", login_data, 0, data[index][0])
                    self.showPopUp("Getting Voted List", "Getting...")
                    self.worker.start()
                except Exception as e:
                    self.showMsgBox(
                        "Error",
                        "An error has occurred!",
                        str(e),
                        True,
                        False,
                    )
            else:
                self.showMsgBox(
                    "Error",
                    "Certificate not in Trusted List!",
                    "This Certificate is not in your Trusted List",
                    True,
                    False,
                )

    def showPopUp(self, title, text):
        self.pop_up = QtWidgets.QDialog()
        ui = Ui_dialog()
        ui.setupUi(self.pop_up, title, text)
        self.pop_up.show()

    def validadeCertificate(self, login_data, data):
        index = self.verifyres_table.currentRow()
        input_priv_key = Ui_custom_input_window(
            "Wallet private key", "Inform your private key (will not be stored)", True
        )
        priv_key = input_priv_key.getResults()
        if priv_key:
            self.worker.args("vote", login_data, priv_key, data[index][0])
            self.showPopUp("Validating Certificate", "Validating...")
            self.worker.start()

    def verifyValidation(self, out, login_data, data):
        if out[len(out) - 1] == "vote":
            if out[0]:
                self.showMsgBox(
                    "Success",
                    "Certificate Validated!",
                    "Certificate was successfuly validated",
                    False,
                    False,
                )
            else:
                self.showMsgBox(
                    "Error",
                    "An error has occurred!",
                    str(out[1]),
                    True,
                    False,
                )
        elif out[len(out) - 1] == "remove":
            if out[0]:
                self.showMsgBox(
                    "Success",
                    "Validation Removed!",
                    "Validation was successfuly removed",
                    False,
                    False,
                )
            else:
                self.showMsgBox(
                    "Error",
                    "An error has occurred!",
                    str(out[1]),
                    True,
                    False,
                )
        else:
            if out[0] != False:
                index = self.verifyres_table.currentRow()
                input_passw = Ui_custom_input_window(
                    "Sudo password",
                    "Inform your Sudo password (will not be stored)",
                    True,
                )
                passw = input_passw.getResults()
                if passw:
                    for addr in out[0]:
                        rmv = UninstallCertificate(
                            passw, login_data.session.address, addr
                        )
                        remove = rmv.remove_certificate()
                        err = ""
                        if remove != True:
                            err += str(remove) + "\n"
                    if err == "":
                        try:
                            col_list = ["address"]
                            inp = pd.read_csv(
                                "Data/UserData/"
                                + login_data.session.address
                                + "/TrustedList.csv",
                                usecols=col_list,
                            )
                            with open(
                                "Data/UserData/"
                                + login_data.session.address
                                + "/TrustedList.csv",
                                "w",
                            ) as file:
                                out = csv.writer(
                                    file,
                                    delimiter=",",
                                    quotechar='"',
                                    quoting=csv.QUOTE_MINIMAL,
                                )
                                out.writerow(col_list)
                                for row in inp["address"]:
                                    if data[index][0] != row:
                                        out.writerow(row)
                            self.showMsgBox(
                                "Success",
                                "Removed from your Trusted List!",
                                "All Certificates validate by this one were removed",
                                False,
                                False,
                            )
                        except Exception as e:
                            self.showMsgBox(
                                "Error",
                                "An error has occurred!",
                                str(e),
                                True,
                                False,
                            )
                    else:
                        self.showMsgBox(
                            "Error",
                            "An error has occurred!",
                            err,
                            True,
                            False,
                        )
            else:
                self.showMsgBox(
                    "Error",
                    "An error has occurred!",
                    str(out[1]),
                    True,
                    False,
                )

    def removeValidation(self, login_data, data):
        index = self.verifyres_table.currentRow()
        input_priv_key = Ui_custom_input_window(
            "Wallet private key", "Inform your private key (will not be stored)", True
        )
        priv_key = input_priv_key.getResults()
        if priv_key:
            self.worker.args("remove", login_data, priv_key, data[index][0])
            self.showPopUp("Removing Validation", "Removing...")
            self.worker.start()

    def showMsgBox(self, title, text, inform, err, cancel):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setInformativeText(inform)
        if err:
            msg.setIcon(QMessageBox.Critical)
        else:
            msg.setIcon(QMessageBox.Information)
        if cancel:
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        else:
            msg.setStandardButtons(QMessageBox.Ok)
        x = msg.exec_()
        return x

    def cancel(self, verify_results_window, verify_window):
        verify_window.show()
        verify_results_window.close()


class Worker(QThread):
    worker_complete = pyqtSignal(list)

    def run(self):
        if self.type == "vote":
            out = self.vote.vote(self.address)
            out.append("vote")
        elif self.type == "remove":
            out = self.remove.remove_vote(self.address)
            out.append("remove")
        else:
            out = self.list.voted_list(self.address)
            out.append("list")
        self.worker_complete.emit(out)

    def args(self, type, login_data, priv_key, address):
        self.type = type
        self.address = address
        if type == "vote":
            self.vote = Vote(
                login_data.session.address, login_data.session.endpoint, priv_key
            )
        elif type == "remove":
            self.remove = RemoveVote(
                login_data.session.address, login_data.session.endpoint, priv_key
            )
        else:
            self.list = VotedList(login_data.session.endpoint)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    verify_results_window = QtWidgets.QWidget()
    ui = Ui_verify_results_window()
    ui.setupUi(verify_results_window)
    verify_results_window.show()
    sys.exit(app.exec_())
