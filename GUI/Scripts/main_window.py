# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI/UIs/main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import csv
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QMessageBox
from GUI.Scripts.create_certificate_window import Ui_create_certificate_window
from GUI.Scripts.verify_window import Ui_verify_window
from GUI.Scripts.dialog import Ui_dialog
from GUI.Scripts.custom_input_window import Ui_custom_input_window
from Scripts.install_certificate import InstallCertificate
from Scripts.voted_list import VotedList
from Scripts.get_info import GetInfo
from Scripts.revoke import Revoke


class Ui_main_window(object):
    def setupUi(self, main_window, login_window, login_data):
        main_window.setObjectName("main_window")
        main_window.resize(549, 407)
        main_window.setFixedSize(549, 407)
        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(160, 150, 221, 50))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(
            lambda: self.createCreateCertificateWindow(main_window, login_data)
        )
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 471, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 350, 131, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: self.revoke(login_data))
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(160, 220, 221, 50))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(
            lambda: self.createVerifyCertificateWindow(main_window, login_data)
        )
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 50, 531, 51))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(200, 350, 141, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(
            lambda: self.logout(main_window, login_window)
        )
        font = QtGui.QFont()
        font.setPointSize(8)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setGeometry(QtCore.QRect(390, 350, 131, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(
            lambda: self.updateFromTrustedList(login_data)
        )
        main_window.setCentralWidget(self.centralwidget)
        self.worker = Worker()
        self.worker.finished.connect(lambda: self.pop_up.close())
        self.worker.worker_complete.connect(
            lambda x: self.verifyCompletion(x, login_data)
        )

        self.retranslateUi(main_window, login_data)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslateUi(self, main_window, login_data):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("main_window", "MainWindow"))
        self.pushButton.setText(_translate("main_window", "Create Certificate"))
        self.label.setText(
            _translate("main_window", "Welcome " + login_data.session.address)
        )
        self.pushButton_2.setText(_translate("main_window", "Revoke Certificate"))
        self.pushButton_3.setText(_translate("main_window", "Browse Certificates"))
        self.label_2.setText(_translate("main_window", "What do you want to do?"))
        self.pushButton_4.setText(_translate("main_window", "Logout"))
        self.pushButton_5.setText(_translate("main_window", "Update from Trusted List"))

    def createCreateCertificateWindow(self, main_window, login_data):
        main_window.hide()
        self.create_certificate_window = QtWidgets.QWidget()
        self.ui = Ui_create_certificate_window()
        self.ui.setupUi(self.create_certificate_window, main_window, login_data)
        self.create_certificate_window.show()

    def createVerifyCertificateWindow(self, main_window, login_data):
        main_window.hide()
        self.verify_window = QtWidgets.QWidget()
        self.ui = Ui_verify_window()
        self.ui.setupUi(self.verify_window, main_window, login_data)
        self.verify_window.show()

    def revoke(self, login_data):
        returnValue = self.showMsgBox(
            "Information",
            "You are about to Revoke your Certificate",
            "Revoking your certificate means that it will no longer be considered valid by PKC and after revoking you will not be able to perform any new operations whatsoever.\nWant to proceed?",
            False,
            True,
        )
        if returnValue == QMessageBox.Ok:
            input_priv_key = Ui_custom_input_window(
                "Wallet private key",
                "Inform your private key (will not be stored)",
                True,
            )
            priv_key = input_priv_key.getResults()
            if priv_key:
                self.worker.args("revoke", login_data, priv_key=priv_key)
                self.showPopUp("Revoking", "Revoking...")
                self.worker.start()

    def updateFromTrustedList(self, login_data):
        returnValue = self.showMsgBox(
            "Information",
            "You are about to Update from your Trusted List",
            "Updating will install EVERY Certificate that had been validated by the the Certificates in your trusted list, this operation may take some time.\nWant to proceed?",
            False,
            True,
        )
        if returnValue == QMessageBox.Ok:
            input_passw = Ui_custom_input_window(
                "Sudo password",
                "Inform your Sudo password (will not be stored)",
                True,
            )
            passw = input_passw.getResults()
            if passw:
                col_list = ["address"]
                df = pd.read_csv(
                    "Data/UserData/" + login_data.session.address + "/TrustedList.csv",
                    usecols=col_list,
                )
                for row in df["address"]:
                    try:
                        self.worker.args("list", login_data, row, passw)
                        self.showPopUp("Getting Voted List", "Getting...")
                        self.worker.start()
                    except Exception as e:
                        self.showMsgBox(
                            "Error",
                            "An error has occurred!",
                            str(e),
                            True,
                            False,
                        )

    def verifyCompletion(self, out, login_data):
        if out[len(out) - 1] == "list":
            if out[0] != False:
                for row in out[0]:
                    self.worker.args("info", login_data, row, out[len(out) - 2])
                    self.showPopUp("Getting Data", "Getting...")
                    self.worker.start()
            else:
                self.showMsgBox(
                    "Error",
                    "An error has occurred!",
                    str(out[1]),
                    True,
                    False,
                )
        elif out[len(out) - 1] == "info":
            if out[0] != False:
                inst = InstallCertificate(
                    out[len(out) - 2], login_data.session.address, out[0][3], out[0][0]
                )
                install = inst.install_certificate()
                if install == True:
                    self.showMsgBox(
                        "Success",
                        "Certificate installed!",
                        "Certificate has been successfully installed!",
                        False,
                        False,
                    )
                else:
                    self.showMsgBox(
                        "Error",
                        "Error installing the Certificate!",
                        str(install),
                        True,
                        False,
                    )
            else:
                self.showMsgBox(
                    "Error",
                    "An error has occurred!",
                    str(out[1]),
                    True,
                    False,
                )
        else:
            if out[0] != False:
                self.showMsgBox(
                    "Success",
                    "Certificate revoked!",
                    "Certificate has been successfully revoked!",
                    False,
                    False,
                )
            else:
                self.showMsgBox(
                    "Error",
                    "An error has occurred!",
                    str(out[1]),
                    True,
                    False,
                )

    def showPopUp(self, title, text):
        self.pop_up = QtWidgets.QDialog()
        ui = Ui_dialog()
        ui.setupUi(self.pop_up, title, text)
        self.pop_up.show()

    def showMsgBox(self, title, text, inform, err, cancel):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setInformativeText(inform)
        if err:
            msg.setIcon(QMessageBox.Critical)
        else:
            msg.setIcon(QMessageBox.Information)
        if cancel:
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        else:
            msg.setStandardButtons(QMessageBox.Ok)
        x = msg.exec_()
        return x

    def logout(self, main_window, login_window):
        login_window.show()
        main_window.close()


class Worker(QThread):
    worker_complete = pyqtSignal(list)

    def run(self):
        if self.type == "list":
            out = self.list.voted_list(self.address)
            out.append(self.passw)
            out.append("list")
        elif self.type == "info":
            out = self.info.get_info(self.address)
            out.append(self.passw)
            out.append("info")
        else:
            out = self.revoke.revoke()
            out.append("revoke")
        self.worker_complete.emit(out)

    def args(self, type, login_data, address="", passw="", priv_key=""):
        self.type = type
        self.address = address
        self.passw = passw
        if type == "list":
            self.list = VotedList(login_data.session.endpoint)
        elif type == "info":
            self.info = GetInfo(login_data.session.endpoint)
        else:
            self.revoke = Revoke(
                login_data.session.address, login_data.session.endpoint, priv_key
            )


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QMainWindow()
    ui = Ui_main_window()
    ui.setupUi(main_window)
    main_window.show()
    sys.exit(app.exec_())
