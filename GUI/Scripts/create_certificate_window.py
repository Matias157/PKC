# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI/UIs/new_create_certificate_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QMessageBox, QFileDialog
from cryptography import x509
from cryptography.hazmat.primitives import serialization
from GUI.Scripts.x509_window import Ui_x509_window
from GUI.Scripts.dialog import Ui_dialog
from Scripts.create_certificate import CreateCertificate


class Ui_create_certificate_window(object):
    def setupUi(self, create_certificate_window, main_window, login_data):
        create_certificate_window.setObjectName("create_certificate_window")
        create_certificate_window.resize(623, 464)
        create_certificate_window.setFixedSize(623, 464)
        self.create_title = QtWidgets.QLabel(create_certificate_window)
        self.create_title.setGeometry(QtCore.QRect(120, 10, 381, 61))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.create_title.setFont(font)
        self.create_title.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.create_title.setObjectName("create_title")
        self.createcertif_button_2 = QtWidgets.QPushButton(create_certificate_window)
        self.createcertif_button_2.setGeometry(QtCore.QRect(420, 420, 100, 31))
        self.createcertif_button_2.setObjectName("createcertif_button_2")
        self.createcertif_button_2.clicked.connect(
            lambda: self.cancel(create_certificate_window, main_window)
        )
        self.createcertif_label_2 = QtWidgets.QLabel(create_certificate_window)
        self.createcertif_label_2.setGeometry(QtCore.QRect(10, 80, 111, 19))
        self.createcertif_label_2.setObjectName("createcertif_label_2")
        self.createcertif_button_1 = QtWidgets.QPushButton(create_certificate_window)
        self.createcertif_button_1.setGeometry(QtCore.QRect(100, 420, 100, 31))
        self.createcertif_button_1.setObjectName("createcertif_button_1")
        self.createcertif_button_1.clicked.connect(
            lambda: self.createCertificate(login_data)
        )
        self.createcertif_line_2 = QtWidgets.QLineEdit(create_certificate_window)
        self.createcertif_line_2.setGeometry(QtCore.QRect(10, 350, 601, 31))
        self.createcertif_line_2.setObjectName("createcertif_line_2")
        self.createcertif_line_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.createcertif_label_3 = QtWidgets.QLabel(create_certificate_window)
        self.createcertif_label_3.setGeometry(QtCore.QRect(10, 320, 211, 19))
        self.createcertif_label_3.setObjectName("createcertif_label_3")
        self.createcertif_line_3 = QtWidgets.QLineEdit(create_certificate_window)
        self.createcertif_line_3.setGeometry(QtCore.QRect(10, 240, 461, 31))
        self.createcertif_line_3.setObjectName("createcertif_line_3")
        self.createcertif_button_3 = QtWidgets.QPushButton(create_certificate_window)
        self.createcertif_button_3.setGeometry(QtCore.QRect(500, 240, 100, 31))
        self.createcertif_button_3.setObjectName("createcertif_button_3")
        self.createcertif_button_3.clicked.connect(
            lambda: self.browseFiles(create_certificate_window, login_data)
        )
        self.createcertif_label_4 = QtWidgets.QLabel(create_certificate_window)
        self.createcertif_label_4.setGeometry(QtCore.QRect(10, 210, 131, 19))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.createcertif_label_4.setFont(font)
        self.createcertif_label_4.setObjectName("createcertif_label_4")
        self.createcertif_button_4 = QtWidgets.QPushButton(create_certificate_window)
        self.createcertif_button_4.setGeometry(QtCore.QRect(10, 150, 100, 31))
        self.createcertif_button_4.setObjectName("createcertif_button_4")
        self.createcertif_button_4.clicked.connect(
            lambda: self.createX509Window(create_certificate_window, login_data)
        )
        self.createcertif_label_5 = QtWidgets.QLabel(create_certificate_window)
        self.createcertif_label_5.setGeometry(QtCore.QRect(10, 120, 131, 19))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.createcertif_label_5.setFont(font)
        self.createcertif_label_5.setObjectName("createcertif_label_5")
        self.worker = Worker()
        self.worker.finished.connect(lambda: self.pop_up.close())
        self.worker.worker_complete.connect(
            lambda x: self.showMsgBox(x, create_certificate_window, main_window)
        )

        self.retranslateUi(create_certificate_window)
        QtCore.QMetaObject.connectSlotsByName(create_certificate_window)

    def retranslateUi(self, create_certificate_window):
        _translate = QtCore.QCoreApplication.translate
        create_certificate_window.setWindowTitle(
            _translate("create_certificate_window", "Create Certificate")
        )
        self.create_title.setText(
            _translate("create_certificate_window", "Create Certificate")
        )
        self.createcertif_button_2.setText(
            _translate("create_certificate_window", "Cancel")
        )
        self.createcertif_label_2.setText(
            _translate("create_certificate_window", "x509 Certificate")
        )
        self.createcertif_button_1.setText(
            _translate("create_certificate_window", "Create")
        )
        self.createcertif_label_3.setText(
            _translate("create_certificate_window", "Wallet Private Key (not stored)")
        )
        self.createcertif_button_3.setText(
            _translate("create_certificate_window", "Select")
        )
        self.createcertif_label_4.setText(
            _translate("create_certificate_window", "Browse your Certificate")
        )
        self.createcertif_button_4.setText(
            _translate("create_certificate_window", "Create")
        )
        self.createcertif_label_5.setText(
            _translate("create_certificate_window", "Create a new Certificate")
        )

    def browseFiles(self, create_certificate_window, login_data):
        fname = QFileDialog.getOpenFileName(
            create_certificate_window,
            "Open file",
            "./Data/UserData/" + login_data.session.address,
        )
        self.createcertif_line_3.setText(fname[0])

    def createX509Window(self, create_certificate_window, login_data):
        create_certificate_window.hide()
        self.x509_window = QtWidgets.QWidget()
        self.ui = Ui_x509_window()
        self.ui.setupUi(self.x509_window, create_certificate_window, login_data)
        self.x509_window.show()

    def createCertificate(self, login_data):
        attrList = []
        url = ""
        try:
            with open(self.createcertif_line_3.text(), "rb") as f:
                cert = x509.load_pem_x509_certificate(f.read())
            for attribute in cert.subject:
                if str(attribute.oid._name) != "commonName":
                    attrList.append(str(attribute.oid._name))
                    attrList.append(str(attribute.value))
                else:
                    url = str(attribute.value)

            self.worker.args(
                login_data,
                self.createcertif_line_2.text(),
                url,
                cert.public_bytes(serialization.Encoding.PEM),
                attrList,
            )
            self.showPopUp()
            self.worker.start()
        except Exception as e:
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Error importing Certificate!")
            msg.setInformativeText(str(e))
            msg.setIcon(QMessageBox.Critical)
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()

    def showPopUp(self):
        self.pop_up = QtWidgets.QDialog()
        ui = Ui_dialog()
        ui.setupUi(
            self.pop_up, "Creating Certificate", "Cretificate is being created..."
        )
        self.pop_up.show()

    def showMsgBox(self, out, create_certificate_window, main_window):
        msg = QMessageBox()
        if out[0]:
            msg.setWindowTitle("Completion")
            msg.setText("Execution Completed!")
            msg.setInformativeText("No Execution Details")
            msg.setIcon(QMessageBox.Information)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.buttonClicked.connect(
                lambda: self.cancel(create_certificate_window, main_window)
            )
        else:
            msg.setWindowTitle("Error")
            msg.setText("Execution Reverted!")
            msg.setInformativeText(str(out[1]))
            msg.setIcon(QMessageBox.Critical)
            msg.setStandardButtons(QMessageBox.Ok)
        x = msg.exec_()

    def cancel(self, create_certificate_window, main_window):
        main_window.show()
        create_certificate_window.close()


class Worker(QThread):
    worker_complete = pyqtSignal(list)

    def run(self):
        # time.sleep(5)
        out = self.cert.create_certificate(self.x509, self.url, self.attributes)
        self.worker_complete.emit(out)

    def args(self, login_data, priv_key, url, x509, attributes):
        self.cert = CreateCertificate(
            login_data.session.address,
            login_data.session.endpoint,
            priv_key,
        )
        self.url = url
        self.x509 = x509
        self.attributes = attributes


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    create_certificate_window = QtWidgets.QWidget()
    ui = Ui_create_certificate_window()
    ui.setupUi(create_certificate_window)
    create_certificate_window.show()
    sys.exit(app.exec_())
